#!/usr/bin/env python3
import pdb
from pathlib import Path
import os
import argparse
import z3
import pickle


import settings
import vcommon as CM

DBG = pdb.set_trace

mlog = CM.getLogger(__name__, settings.logger_level)


def get_conditions(kmax_formulas, kbuild_path):
    if kbuild_path in kmax_formulas:
        conditions = []
        # add the condition for the compilation unit and each of its parent directories
        unit_constraint = z3.parse_smt2_string(kmax_formulas[kbuild_path])
        conditions.extend(unit_constraint)
        mlog.debug("{} => {}".format(kbuild_path, unit_constraint))

        if '/' in kbuild_path:
            subpath, basename = kbuild_path.rsplit('/', 1)
            elems = subpath.rsplit('/')
            for i in range(0, len(elems)):
                subarray = elems[0:(len(elems) - i)]
                subsubpath = '/'.join(subarray) + "/"
                if subsubpath in kmax_formulas.keys():
                    subsubpath_constraint = z3.parse_smt2_string(
                        kmax_formulas[subsubpath])
                    conditions.extend(subsubpath_constraint)
                    mlog.debug("%s\n%s\n" %
                               (subsubpath, subsubpath_constraint))
                else:
                    mlog.info("%s has no kmax formula, assuming it is unconstrained." % (
                        subsubpath))
        return conditions
    else:
        return None


def unpickle_kmax_file(kmax_file):
    with open(kmax_file, 'rb') as fp:
        kmax = pickle.load(fp)
        return kmax


if __name__ == '__main__':
    argparser = argparse.ArgumentParser("KAnalysis")

    # 0 Error #1 Warn #2 Info #3 Debug #4 Detail
    ag = argparser.add_argument

    ag("inp", help="path to the directory or file containing kmax formula")

    ag("--log_level", "-log_level",
       type=int,
       choices=range(5),
       default=2,
       help="set logger info")

    # ag('--formulas',
    #    type=str,
    #    default=".kmax/",
    #    help="""Path to the formulas which contain one kmax file for all compilation units and one directory for each architecture containing kclause files.  Defaults to \".kmax/\"""")

    # ag('--kmax-formulas',
    #    type=str,
    #    default=None,
    #    help="""The file containing the Kbuild constraints as a pickled dictionary from compilation unit to formula.  Defaults to \"kmax\" in the --formulas directory.""")
    ag("--pathprefix",
       type=str,
       help="The path prefix of the compilation units to retrieve kmax formulas from.")
    args = argparser.parse_args()

    if 0 <= args.log_level <= 4 and args.log_level != settings.logger_level:
        settings.logger_level = args.log_level

    kmax_file = Path(args.inp)

    if kmax_file.is_dir():
        kmax_file = kmax_file / 'kmax'

    if not kmax_file.is_file():
        mlog.error("{} does not exist!".format(kmax_file))
        exit(1)

    mlog.info("Kmax formula file: {}".format(kmax_file))
    kmax_formulas = unpickle_kmax_file(kmax_file)
    formulas = {unit: get_conditions(
        kmax_formulas, unit) for unit in kmax_formulas}
    path_prefix = args.pathprefix
    print(path_prefix)
    filtered_formulas = {}
    print(formulas)  # remove to avoid printing the whole map
